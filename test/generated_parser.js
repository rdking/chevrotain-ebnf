//Generated By chevrotain_ebnf
const { Lexer, Parser, createToken, createSyntaxDiagramsCode } = require("chevrotain");
const fs = require("fs");

let Vocabulary = {
    VocabTerm0: createToken({
        name: `/VocabTerm0/`,
        pattern: /\(/,
    }),
    VocabTerm1: createToken({
        name: `/VocabTerm1/`,
        pattern: /\)/,
    }),
    VocabTerm2: createToken({
        name: `/VocabTerm2/`,
        pattern: / /,
    }),
    VocabTerm3: createToken({
        name: `/VocabTerm3/`,
        pattern: /\t/,
    }),
    VocabTerm4: createToken({
        name: `/VocabTerm4/`,
        pattern: /\n/,
    }),
    VocabTerm5: createToken({
        name: `/VocabTerm5/`,
        pattern: /\r/,
    }),
    VocabTerm6: createToken({
        name: `/VocabTerm6/`,
        pattern: /0/,
    }),
    VocabTerm7: createToken({
        name: `/VocabTerm7/`,
        pattern: /1/,
    }),
    VocabTerm8: createToken({
        name: `/VocabTerm8/`,
        pattern: /2/,
    }),
    VocabTerm9: createToken({
        name: `/VocabTerm9/`,
        pattern: /3/,
    }),
    VocabTerm10: createToken({
        name: `/VocabTerm10/`,
        pattern: /4/,
    }),
    VocabTerm11: createToken({
        name: `/VocabTerm11/`,
        pattern: /5/,
    }),
    VocabTerm12: createToken({
        name: `/VocabTerm12/`,
        pattern: /6/,
    }),
    VocabTerm13: createToken({
        name: `/VocabTerm13/`,
        pattern: /7/,
    }),
    VocabTerm14: createToken({
        name: `/VocabTerm14/`,
        pattern: /8/,
    }),
    VocabTerm15: createToken({
        name: `/VocabTerm15/`,
        pattern: /9/,
    }),
    VocabTerm16: createToken({
        name: `/VocabTerm16/`,
        pattern: /\+/,
    }),
    VocabTerm17: createToken({
        name: `/VocabTerm17/`,
        pattern: /\-/,
    }),
    VocabTerm18: createToken({
        name: `/VocabTerm18/`,
        pattern: /\*/,
    }),
    VocabTerm19: createToken({
        name: `/VocabTerm19/`,
        pattern: /\//,
    }),
};

let Tokens = Object.values(Vocabulary);

module.exports = class extends Parser {
    constructor(source, config) {
        let lexer = new Lexer(Tokens);
        let lexResult = lexer.tokenize(source);

        if (lexResult.errors.length > 0) {
            throw new Error(collectLexerErrors(lexResult.errors));
        }

        super(Vocabulary, config);
        let tokens = lexResult.tokens;
        let $ = this;
        $.RULE("Expression", () => {
            $.OR([
                {
                    Alt: () => {
                        $.SUBRULE($.SubExpression);
                    }
                },
                {
                    Alt: () => {
                        $.SUBRULE($.Operation);
                    }
                }
            ]);
        });

        $.RULE("SubExpression", () => {
            $.CONSUME(Vocabulary.VocabTerm0);
            $.OPTION(() => {
                $.SUBRULE($.ws);
            });
            $.SUBRULE($.Expression);
            $.OPTION(() => {
                $.SUBRULE($.ws);
            });
            $.CONSUME(Vocabulary.VocabTerm1);
        });

        $.RULE("ws", () => {
            $.MANY(() => {
                $.OR([
                    {
                        Alt: () => {
                            $.CONSUME(Vocabulary.VocabTerm2);
                        }
                    },
                    {
                        Alt: () => {
                            $.CONSUME(Vocabulary.VocabTerm3);
                        }
                    },
                    {
                        Alt: () => {
                            $.CONSUME(Vocabulary.VocabTerm4);
                        }
                    },
                    {
                        Alt: () => {
                            $.CONSUME(Vocabulary.VocabTerm5);
                        }
                    }
                ]);
            });
        });

        $.RULE("Digit", () => {
            $.OR([
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm6);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm7);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm8);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm9);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm10);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm11);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm12);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm13);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm14);
                    }
                },
                {
                    Alt: () => {
                        $.CONSUME(Vocabulary.VocabTerm15);
                    }
                }
            ]);
        });

        $.RULE("Integer", () => {
            $.SUBRULE($.Digit);
            $.MANY(() => {
                $.SUBRULE($.Digit);
            });
        });

        $.RULE("Operation", () => {
            $.SUBRULE($.ASValue);
            $.OPTION(() => {
                $.SUBRULE($.ws);
            });
            $.MANY(() => {
                $.SUBRULE($.ASOperation);
            });
        });

        $.RULE("ASValue", () => {
            $.SUBRULE($.MDValue);
            $.OPTION(() => {
                $.SUBRULE($.ws);
            });
            $.OPTION(() => {
                $.SUBRULE($.MDOperation);
            });
        });

        $.RULE("MDValue", () => {
            $.OR([
                {
                    Alt: () => {
                        $.SUBRULE($.Integer);
                    }
                },
                {
                    Alt: () => {
                        $.SUBRULE($.SubExpression);
                    }
                }
            ]);
        });

        $.RULE("ASOperation", () => {
            $.SUBRULE($.ASOP);
            $.OPTION(() => {
                $.SUBRULE($.ws);
            });
            $.SUBRULE($.ASValue);
        });

        $.RULE("ASOP", () => {
            $.OR([
                {
                    Alt: () => {
                        $.SUBRULE($.Addition);
                    }
                },
                {
                    Alt: () => {
                        $.SUBRULE($.Subtraction);
                    }
                }
            ]);
        });

        $.RULE("Addition", () => {
            $.CONSUME(Vocabulary.VocabTerm16);
        });

        $.RULE("Subtraction", () => {
            $.CONSUME(Vocabulary.VocabTerm17);
        });

        $.RULE("MDOperation", () => {
            $.SUBRULE($.MDOP);
            $.OPTION(() => {
                $.SUBRULE($.ws);
            });
            $.SUBRULE($.MDValue);
        });

        $.RULE("MDOP", () => {
            $.OR([
                {
                    Alt: () => {
                        $.SUBRULE($.Multiplication);
                    }
                },
                {
                    Alt: () => {
                        $.SUBRULE($.Division);
                    }
                }
            ]);
        });

        $.RULE("Multiplication", () => {
            $.CONSUME(Vocabulary.VocabTerm18);
        });

        $.RULE("Division", () => {
            $.CONSUME(Vocabulary.VocabTerm19);
        });

        this.performSelfAnalysis();
    }
    saveSyntaxDiagram(filename) {
        let serializedGrammar = this.getSerializedGastProductions();

        // create the HTML Text
        let htmlText = createSyntaxDiagramsCode(serializedGrammar);

        // Write the HTML file to disk
        fs.writeFileSync(filename, htmlText)
    }
};
