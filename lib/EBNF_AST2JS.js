const createClassHelpers = require("./classHelpers");
const ASTVisitor = require("./ASTVisitor");

module.exports = (function() {
	function pvtData() {
		return {
			header: "",
			vocabulary: {}, //keys and regex expressions
			functions: {}, //keys and function body strings
			terminalIndex: null,
			indent: 0,
			get pad() {
				let p = getPrivate(this, "pad", true);
				return Array(p.indent).join("    ");
			}
		};
	}

	class EBNF_AST2JS extends ASTVisitor {
		constructor(types) {
			super(types);
			let p = makePrivates(this, new.target);

			this.validateVisitor();
		}

		Grammar(node) {
			let retval = "";
			let p = getPrivate(this, "Grammar");
			p.header = `//Generated By chevrotain_ebnf\n` +
					   `const createClassHelpers = require("./lib/classHelpers");\n` +
					   `const { Lexer, Parser, createToken, createSyntaxDiagramsCode } = require("chevrotain");\n` +
					   `const fs = require("fs");`;


			for (let rule of node.rules) {
				this.visit(rule);
			}

			return retval;
		}

		Rule(node) {
			let p = getPrivate(this, "Rule");
			p.functions[node.name] = this.visit(node.definition);
		}

		Definition(node) {
			let p = getPrivate(this, "Definition");
			let retval = "let $ = this;\n\n";
			let needOR = node.alternatives.length > 1;

			p.indent = 0;
			
			if (needOR) {
				retval += `${p.pad}$.OR([`;
				++p.indent;
			}

			for (let alt of node.alternatives) {
				if (needOR) {
					retval += `${p.pad}{\n`;
					++p.indent;
					retval += `${p.pad}Alt: () => {\n`;
					++p.indent;
				}
				retval += this.visit(alt);
				if (needOR) {
					--p.indent;
					retval += `${p.pad}}\n`;
					--p.indent;
					retval += `${p.pad}}\n`;					
				}
			}

			if (needOR) {
				--p.indent;
				retval += `]);`;
			}

			return retval;
		}

		Sequence(node) {
			
		}

		Alternate(node) {
			
		}

		Optional(node) {
			
		}

		Repeated(node) {
			
		}

		Group(node) {
			
		}
	}

	let { makePrivates, getPrivate } = createClassHelpers({
		classDef: EBNF_AST2JS,
		privateData: pvtData
	});

	return EBNF_AST2JS;
})();
